var documenterSearchIndex = {"docs":
[{"location":"solve/#Solving-Linear-Programs","page":"Solving LPs","title":"Solving Linear Programs","text":"","category":"section"},{"location":"solve/#Manual-Solution","page":"Solving LPs","title":"Manual Solution","text":"","category":"section"},{"location":"solve/","page":"Solving LPs","title":"Solving LPs","text":"Once a tableau has been created for a given linear program, the objective function can be minimized by the following steps:","category":"page"},{"location":"solve/","page":"Solving LPs","title":"Solving LPs","text":"Set a starting basis using set_basis!(T, B). To have the computer suggest a starting basis, use find_a_basis(T). \nRepeatedly pivot the tableau until all the numbers under variable names are nonpositive. Use find_pivot to have the computer suggest a basis pivot. \nWhen pivoting is finished, use basic_vector(T) to get the values for the variables that minimizes the LP and use value(T) to get the minimum objective value. ","category":"page"},{"location":"solve/#Simplex-Method-Solution","page":"Solving LPs","title":"Simplex Method Solution","text":"","category":"section"},{"location":"solve/","page":"Solving LPs","title":"Solving LPs","text":"Given a tableau, use simplex_solve! to have the computer perform all the steps to produce an optimal solution to a linear program. ","category":"page"},{"location":"solve/","page":"Solving LPs","title":"Solving LPs","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ x_7 │ RHS │\n│ Obj Func │ 1 │  -9 │  -4 │  -2 │  -2 │  -7 │  -7 │  -3 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   2 │   2 │   3 │   1 │   8 │   1 │   2 │   3 │\n│   Cons 2 │ 0 │   3 │   1 │   3 │   2 │   5 │   2 │   8 │   7 │\n│   Cons 3 │ 0 │   8 │   2 │   1 │   4 │   6 │   3 │   2 │   8 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> simplex_solve!(T)\n[ Info: Finding an initial basis.\nStarting basis found: [1, 5, 7]\nStarting tableau\n\n┌──────────┬───┬─────┬─────────┬────────┬─────────┬─────┬─────────┬─────┬──────────┐\n│          │ z │ x_1 │     x_2 │    x_3 │     x_4 │ x_5 │     x_6 │ x_7 │      RHS │\n│ Obj Func │ 1 │   0 │ -149/86 │ -53/86 │ 439/172 │   0 │ -152/43 │   0 │ 1619/172 │\n├──────────┼───┼─────┼─────────┼────────┼─────────┼─────┼─────────┼─────┼──────────┤\n│   Cons 1 │ 0 │   1 │    7/86 │  -9/43 │  85/172 │   0 │   29/86 │   0 │  145/172 │\n│   Cons 2 │ 0 │   0 │   21/86 │  16/43 │  -3/172 │   1 │    1/86 │   0 │    5/172 │\n│   Cons 3 │ 0 │   0 │   -5/86 │  19/86 │  13/172 │   0 │    5/43 │   1 │   93/172 │\n└──────────┴───┴─────┴─────────┴────────┴─────────┴─────┴─────────┴─────┴──────────┘\n\nPivot 1 at (1, 4)\n\n┌──────────┬───┬─────────┬─────────┬────────┬─────┬─────┬──────────┬─────┬───────┐\n│          │ z │     x_1 │     x_2 │    x_3 │ x_4 │ x_5 │      x_6 │ x_7 │   RHS │\n│ Obj Func │ 1 │ -439/85 │ -183/85 │ 79/170 │   0 │   0 │ -897/170 │   0 │ 86/17 │\n├──────────┼───┼─────────┼─────────┼────────┼─────┼─────┼──────────┼─────┼───────┤\n│   Cons 1 │ 0 │  172/85 │   14/85 │ -36/85 │   1 │   0 │    58/85 │   0 │ 29/17 │\n│   Cons 2 │ 0 │    3/85 │   21/85 │  31/85 │   0 │   1 │     2/85 │   0 │  1/17 │\n│   Cons 3 │ 0 │  -13/85 │   -6/85 │ 43/170 │   0 │   0 │   11/170 │   1 │  7/17 │\n└──────────┴───┴─────────┴─────────┴────────┴─────┴─────┴──────────┴─────┴───────┘\n\nPivot 2 at (2, 3)\n\n┌──────────┬───┬─────────┬─────────┬─────┬─────┬────────┬─────────┬─────┬────────┐\n│          │ z │     x_1 │     x_2 │ x_3 │ x_4 │    x_5 │     x_6 │ x_7 │    RHS │\n│ Obj Func │ 1 │ -323/62 │ -153/62 │   0 │   0 │ -79/62 │ -329/62 │   0 │ 309/62 │\n├──────────┼───┼─────────┼─────────┼─────┼─────┼────────┼─────────┼─────┼────────┤\n│   Cons 1 │ 0 │   64/31 │   14/31 │   0 │   1 │  36/31 │   22/31 │   0 │  55/31 │\n│   Cons 2 │ 0 │    3/31 │   21/31 │   1 │   0 │  85/31 │    2/31 │   0 │   5/31 │\n│   Cons 3 │ 0 │  -11/62 │  -15/62 │   0 │   0 │ -43/62 │    3/62 │   1 │  23/62 │\n└──────────┴───┴─────────┴─────────┴─────┴─────┴────────┴─────────┴─────┴────────┘\n\nOptimality reached. Pivot count = 2\nMinimal value = 309/62 = 4.983870967741935\n7-element Vector{Rational}:\n   0\n   0\n  5//31\n 55//31\n   0\n   0\n 23//62","category":"page"},{"location":"solve/#Big-M-Solution","page":"Solving LPs","title":"Big-M Solution","text":"","category":"section"},{"location":"solve/","page":"Solving LPs","title":"Solving LPs","text":"The function big_M_solve! solves linear programs using the Simplex Method on an augmented tableau. The user may specify the value of M or use the default (100).","category":"page"},{"location":"solve/","page":"Solving LPs","title":"Solving LPs","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ x_7 │ RHS │\n│ Obj Func │ 1 │  -9 │  -4 │  -2 │  -2 │  -7 │  -7 │  -3 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   2 │   2 │   3 │   1 │   8 │   1 │   2 │   3 │\n│   Cons 2 │ 0 │   3 │   1 │   3 │   2 │   5 │   2 │   8 │   7 │\n│   Cons 3 │ 0 │   8 │   2 │   1 │   4 │   6 │   3 │   2 │   8 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> big_M_solve!(T)\nSolving this augmented tableau\n\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬──────┬──────┬──────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ x_7 │  x_8 │  x_9 │ x_10 │ RHS │\n│ Obj Func │ 1 │  -9 │  -4 │  -2 │  -2 │  -7 │  -7 │  -3 │ -100 │ -100 │ -100 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼──────┼──────┼─────┤\n│   Cons 1 │ 0 │   2 │   2 │   3 │   1 │   8 │   1 │   2 │    1 │    0 │    0 │   3 │\n│   Cons 2 │ 0 │   3 │   1 │   3 │   2 │   5 │   2 │   8 │    0 │    1 │    0 │   7 │\n│   Cons 3 │ 0 │   8 │   2 │   1 │   4 │   6 │   3 │   2 │    0 │    0 │    1 │   8 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴──────┴──────┴──────┴─────┘\n\nStarting tableau\n\n┌──────────┬───┬──────┬─────┬─────┬─────┬──────┬─────┬──────┬─────┬─────┬──────┬──────┐\n│          │ z │  x_1 │ x_2 │ x_3 │ x_4 │  x_5 │ x_6 │  x_7 │ x_8 │ x_9 │ x_10 │  RHS │\n│ Obj Func │ 1 │ 1291 │ 496 │ 698 │ 698 │ 1893 │ 593 │ 1197 │   0 │   0 │    0 │ 1800 │\n├──────────┼───┼──────┼─────┼─────┼─────┼──────┼─────┼──────┼─────┼─────┼──────┼──────┤\n│   Cons 1 │ 0 │    2 │   2 │   3 │   1 │    8 │   1 │    2 │   1 │   0 │    0 │    3 │\n│   Cons 2 │ 0 │    3 │   1 │   3 │   2 │    5 │   2 │    8 │   0 │   1 │    0 │    7 │\n│   Cons 3 │ 0 │    8 │   2 │   1 │   4 │    6 │   3 │    2 │   0 │   0 │    1 │    8 │\n└──────────┴───┴──────┴─────┴─────┴─────┴──────┴─────┴──────┴─────┴─────┴──────┴──────┘\n\nPivot 1 at (1, 5)\n\n┌──────────┬───┬────────┬──────┬───────┬────────┬─────┬────────┬────────┬─────────┬─────┬──────┬────────┐\n│          │ z │    x_1 │  x_2 │   x_3 │    x_4 │ x_5 │    x_6 │    x_7 │     x_8 │ x_9 │ x_10 │    RHS │\n│ Obj Func │ 1 │ 3271/4 │ 91/4 │ -95/8 │ 3691/8 │   0 │ 2851/8 │ 2895/4 │ -1893/8 │   0 │    0 │ 8721/8 │\n├──────────┼───┼────────┼──────┼───────┼────────┼─────┼────────┼────────┼─────────┼─────┼──────┼────────┤\n│   Cons 1 │ 0 │    1/4 │  1/4 │   3/8 │    1/8 │   1 │    1/8 │    1/4 │     1/8 │   0 │    0 │    3/8 │\n│   Cons 2 │ 0 │    7/4 │ -1/4 │   9/8 │   11/8 │   0 │   11/8 │   27/4 │    -5/8 │   1 │    0 │   41/8 │\n│   Cons 3 │ 0 │   13/2 │  1/2 │  -5/4 │   13/4 │   0 │    9/4 │    1/2 │    -3/4 │   0 │    1 │   23/4 │\n└──────────┴───┴────────┴──────┴───────┴────────┴─────┴────────┴────────┴─────────┴─────┴──────┴────────┘\n\nPivot 2 at (3, 1)\n\n┌──────────┬───┬─────┬─────────┬─────────┬───────┬─────┬────────┬─────────┬──────────┬─────┬──────────┬─────────┐\n│          │ z │ x_1 │     x_2 │     x_3 │   x_4 │ x_5 │    x_6 │     x_7 │      x_8 │ x_9 │     x_10 │     RHS │\n│ Obj Func │ 1 │   0 │ -522/13 │ 1890/13 │ 105/2 │   0 │ 953/13 │ 8591/13 │ -3699/26 │   0 │ -3271/26 │ 9535/26 │\n├──────────┼───┼─────┼─────────┼─────────┼───────┼─────┼────────┼─────────┼──────────┼─────┼──────────┼─────────┤\n│   Cons 1 │ 0 │   0 │    3/13 │   11/26 │     0 │   1 │   1/26 │    3/13 │     2/13 │   0 │    -1/26 │    2/13 │\n│   Cons 2 │ 0 │   0 │   -5/13 │   19/13 │   1/2 │   0 │  10/13 │   86/13 │   -11/26 │   1 │    -7/26 │   93/26 │\n│   Cons 3 │ 0 │   1 │    1/13 │   -5/26 │   1/2 │   0 │   9/26 │    1/13 │    -3/26 │   0 │     2/13 │   23/26 │\n└──────────┴───┴─────┴─────────┴─────────┴───────┴─────┴────────┴─────────┴──────────┴─────┴──────────┴─────────┘\n\nPivot 3 at (2, 7)\n\n┌──────────┬───┬─────┬─────────┬────────┬─────────┬─────┬─────────┬─────┬────────────┬──────────┬────────────┬──────────┐\n│          │ z │ x_1 │     x_2 │    x_3 │     x_4 │ x_5 │     x_6 │ x_7 │        x_8 │      x_9 │       x_10 │      RHS │\n│ Obj Func │ 1 │   0 │ -149/86 │ -53/86 │ 439/172 │   0 │ -152/43 │   0 │ -17201/172 │ -8591/86 │ -17013/172 │ 1619/172 │\n├──────────┼───┼─────┼─────────┼────────┼─────────┼─────┼─────────┼─────┼────────────┼──────────┼────────────┼──────────┤\n│   Cons 1 │ 0 │   0 │   21/86 │  16/43 │  -3/172 │   1 │    1/86 │   0 │     29/172 │    -3/86 │     -5/172 │    5/172 │\n│   Cons 2 │ 0 │   0 │   -5/86 │  19/86 │  13/172 │   0 │    5/43 │   1 │    -11/172 │    13/86 │     -7/172 │   93/172 │\n│   Cons 3 │ 0 │   1 │    7/86 │  -9/43 │  85/172 │   0 │   29/86 │   0 │    -19/172 │    -1/86 │     27/172 │  145/172 │\n└──────────┴───┴─────┴─────────┴────────┴─────────┴─────┴─────────┴─────┴────────────┴──────────┴────────────┴──────────┘\n\nPivot 4 at (3, 4)\n\n┌──────────┬───┬─────────┬─────────┬────────┬─────┬─────┬──────────┬─────┬──────────┬──────────┬────────────┬───────┐\n│          │ z │     x_1 │     x_2 │    x_3 │ x_4 │ x_5 │      x_6 │ x_7 │      x_8 │      x_9 │       x_10 │   RHS │\n│ Obj Func │ 1 │ -439/85 │ -183/85 │ 79/170 │   0 │   0 │ -897/170 │   0 │ -8452/85 │ -8486/85 │ -16953/170 │ 86/17 │\n├──────────┼───┼─────────┼─────────┼────────┼─────┼─────┼──────────┼─────┼──────────┼──────────┼────────────┼───────┤\n│   Cons 1 │ 0 │    3/85 │   21/85 │  31/85 │   0 │   1 │     2/85 │   0 │    14/85 │    -3/85 │      -2/85 │  1/17 │\n│   Cons 2 │ 0 │  -13/85 │   -6/85 │ 43/170 │   0 │   0 │   11/170 │   1 │    -4/85 │    13/85 │    -11/170 │  7/17 │\n│   Cons 3 │ 0 │  172/85 │   14/85 │ -36/85 │   1 │   0 │    58/85 │   0 │   -19/85 │    -2/85 │      27/85 │ 29/17 │\n└──────────┴───┴─────────┴─────────┴────────┴─────┴─────┴──────────┴─────┴──────────┴──────────┴────────────┴───────┘\n\nPivot 5 at (1, 3)\n\n┌──────────┬───┬─────────┬─────────┬─────┬─────┬────────┬─────────┬─────┬──────────┬──────────┬──────────┬────────┐\n│          │ z │     x_1 │     x_2 │ x_3 │ x_4 │    x_5 │     x_6 │ x_7 │      x_8 │      x_9 │     x_10 │    RHS │\n│ Obj Func │ 1 │ -323/62 │ -153/62 │   0 │   0 │ -79/62 │ -329/62 │   0 │ -3089/31 │ -6187/62 │ -6181/62 │ 309/62 │\n├──────────┼───┼─────────┼─────────┼─────┼─────┼────────┼─────────┼─────┼──────────┼──────────┼──────────┼────────┤\n│   Cons 1 │ 0 │    3/31 │   21/31 │   1 │   0 │  85/31 │    2/31 │   0 │    14/31 │    -3/31 │    -2/31 │   5/31 │\n│   Cons 2 │ 0 │  -11/62 │  -15/62 │   0 │   0 │ -43/62 │    3/62 │   1 │    -5/31 │    11/62 │    -3/62 │  23/62 │\n│   Cons 3 │ 0 │   64/31 │   14/31 │   0 │   1 │  36/31 │   22/31 │   0 │    -1/31 │    -2/31 │     9/31 │  55/31 │\n└──────────┴───┴─────────┴─────────┴─────┴─────┴────────┴─────────┴─────┴──────────┴──────────┴──────────┴────────┘\n\nOptimality reached. Pivot count = 5\nMinimal value = 309/62 = 4.983870967741935\n\nFinal tableau\n\n┌──────────┬───┬─────────┬─────────┬─────┬─────┬────────┬─────────┬─────┬────────┐\n│          │ z │     x_1 │     x_2 │ x_3 │ x_4 │    x_5 │     x_6 │ x_7 │    RHS │\n│ Obj Func │ 1 │ -323/62 │ -153/62 │   0 │   0 │ -79/62 │ -329/62 │   0 │ 309/62 │\n├──────────┼───┼─────────┼─────────┼─────┼─────┼────────┼─────────┼─────┼────────┤\n│   Cons 1 │ 0 │    3/31 │   21/31 │   1 │   0 │  85/31 │    2/31 │   0 │   5/31 │\n│   Cons 2 │ 0 │   64/31 │   14/31 │   0 │   1 │  36/31 │   22/31 │   0 │  55/31 │\n│   Cons 3 │ 0 │  -11/62 │  -15/62 │   0 │   0 │ -43/62 │    3/62 │   1 │  23/62 │\n└──────────┴───┴─────────┴─────────┴─────┴─────┴────────┴─────────┴─────┴────────┘\n\nMinimal value = 309//62 = 4.983870967741935\n7-element Vector{Rational}:\n   0\n   0\n  5//31\n 55//31\n   0\n   0\n 23//62","category":"page"},{"location":"solve/#Numerical-Solution","page":"Solving LPs","title":"Numerical Solution","text":"","category":"section"},{"location":"solve/","page":"Solving LPs","title":"Solving LPs","text":"The function lp_solve uses a standard linear program solver to solve the tableau.  We use the HiGHS solver.","category":"page"},{"location":"solve/","page":"Solving LPs","title":"Solving LPs","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ x_7 │ RHS │\n│ Obj Func │ 1 │  -9 │  -4 │  -2 │  -2 │  -7 │  -7 │  -3 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   2 │   2 │   3 │   1 │   8 │   1 │   2 │   3 │\n│   Cons 2 │ 0 │   3 │   1 │   3 │   2 │   5 │   2 │   8 │   7 │\n│   Cons 3 │ 0 │   8 │   2 │   1 │   4 │   6 │   3 │   2 │   8 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> lp_solve(T)\nMinimal objective value = 4.983870967741936\n\n7-element Vector{Float64}:\n 0.0\n 0.0\n 0.1612903225806452\n 1.7741935483870968\n 0.0\n 0.0\n 0.3709677419354839","category":"page"},{"location":"bases/#Bases","page":"Bases","title":"Bases","text":"","category":"section"},{"location":"bases/#Setting-a-Basis","page":"Bases","title":"Setting a Basis","text":"","category":"section"},{"location":"bases/","page":"Bases","title":"Bases","text":"Use set_basis!(T, B) to specify a starting basis for the tableau.  Here, B is a list (Vector) of integers specifying the columns that are in the basis. ","category":"page"},{"location":"bases/","page":"Bases","title":"Bases","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ RHS │\n│ Obj Func │ 1 │ -25 │ -10 │   0 │   0 │   0 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   3 │  10 │  -1 │   0 │   0 │ 100 │\n│   Cons 2 │ 0 │   5 │   6 │   0 │  -1 │   0 │ 100 │\n│   Cons 3 │ 0 │  10 │   2 │   0 │   0 │  -1 │ 100 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┘\n\njulia> set_basis!(T,[1,4,5])\n┌──────────┬───┬─────┬───────┬───────┬─────┬─────┬────────┐\n│          │ z │ x_1 │   x_2 │   x_3 │ x_4 │ x_5 │    RHS │\n│ Obj Func │ 1 │   0 │ 220/3 │ -25/3 │   0 │   0 │ 2500/3 │\n├──────────┼───┼─────┼───────┼───────┼─────┼─────┼────────┤\n│   Cons 1 │ 0 │   1 │  10/3 │  -1/3 │   0 │   0 │  100/3 │\n│   Cons 2 │ 0 │   0 │  32/3 │  -5/3 │   1 │   0 │  200/3 │\n│   Cons 3 │ 0 │   0 │  94/3 │ -10/3 │   0 │   1 │  700/3 │\n└──────────┴───┴─────┴───────┴───────┴─────┴─────┴────────┘","category":"page"},{"location":"bases/","page":"Bases","title":"Bases","text":"Note: On the screen, the headings for the basis (in this case, x_1, x_4, and x_5) appear in green. ","category":"page"},{"location":"bases/","page":"Bases","title":"Bases","text":"(Image: )","category":"page"},{"location":"bases/","page":"Bases","title":"Bases","text":"The set_basis! function can also be invoked without specifying a basis, i.e. set_basis(T).  In this case, a basis is generated using find_a_basis.","category":"page"},{"location":"bases/#Finding-a-Basis","page":"Bases","title":"Finding a Basis","text":"","category":"section"},{"location":"bases/","page":"Bases","title":"Bases","text":"The function find_a_basis(T) returns a feasible basis for T using the phase-one method.","category":"page"},{"location":"bases/","page":"Bases","title":"Bases","text":"julia> T\n┌──────────┬───┬────────┬─────────┬─────┬─────┬─────┬───────┐\n│          │ z │    x_1 │     x_2 │ x_3 │ x_4 │ x_5 │   RHS │\n│ Obj Func │ 1 │ 61/200 │ 109/200 │   0 │   0 │   0 │     0 │\n├──────────┼───┼────────┼─────────┼─────┼─────┼─────┼───────┤\n│   Cons 1 │ 0 │  -7/10 │   -9/10 │  -1 │   0 │   0 │ -5000 │\n│   Cons 2 │ 0 │  -1/10 │   -1/20 │   0 │  -1 │   0 │  -500 │\n│   Cons 3 │ 0 │      1 │    -1/2 │   0 │   0 │  -1 │     0 │\n└──────────┴───┴────────┴─────────┴─────┴─────┴─────┴───────┘\n\n\njulia> find_a_basis(T)\n3-element Vector{Int64}:\n 1\n 2\n 4","category":"page"},{"location":"bases/","page":"Bases","title":"Bases","text":"The function find_all_bases(T) returns a list of all feasible bases for T:","category":"page"},{"location":"bases/","page":"Bases","title":"Bases","text":"julia> find_all_bases(T)\n6-element Vector{Vector{Int64}}:\n [1, 2, 4]\n [1, 2, 5]\n [1, 3, 4]\n [1, 3, 5]\n [2, 3, 4]\n [3, 4, 5]","category":"page"},{"location":"bases/","page":"Bases","title":"Bases","text":"Note that find_all_bases is rather inefficient as it considers all possible m-element subsets of the columns.","category":"page"},{"location":"create/#Creating-Tableaux","page":"Creating Tableaux","title":"Creating Tableaux","text":"","category":"section"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"The Tableau function creates a linear programming tableau for minimization problems presented either in canonical or standard form, as explained here. ","category":"page"},{"location":"create/#Canonical-LPs","page":"Creating Tableaux","title":"Canonical LPs","text":"","category":"section"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"A canonical LP has the form min c^T x s.t. Ax  b x ge 0.  To set up a tableau for this problem simply create the matrix A  and the vectors b and c, and call Tableau(A,b,c). ","category":"page"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"For example, let A, b, and c be as follows:","category":"page"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"julia> A = [3 10; 5 6; 10 2];\n\njulia> b = [100, 100, 100];\n\njulia> c = [25, 10];\n\njulia> Tableau(A, b, c)\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ RHS │\n│ Obj Func │ 1 │ -25 │ -10 │   0 │   0 │   0 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   3 │  10 │  -1 │   0 │   0 │ 100 │\n│   Cons 2 │ 0 │   5 │   6 │   0 │  -1 │   0 │ 100 │\n│   Cons 3 │ 0 │  10 │   2 │   0 │   0 │  -1 │ 100 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"Notice that extra variables x_3, x_4, and x_5 are added to the tableau as slack variables to convert inequalities into equations. That is, canonical  form LPs are automatically converted into standard form. ","category":"page"},{"location":"create/#Standard-LPs","page":"Creating Tableaux","title":"Standard LPs","text":"","category":"section"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"A linear program in standard form is min c^T x s.t. Ax = b, x  0.  For example,","category":"page"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"julia> A = [2 1 0 9 -1; 1 1 -1 5 1]\n2×5 Matrix{Int64}:\n 2  1   0  9  -1\n 1  1  -1  5   1\n\njulia> b = [9, 7]\n2-element Vector{Int64}:\n 9\n 7\n\njulia> c = [2, 4, 2, 1, -1]\n5-element Vector{Int64}:\n  2\n  4\n  2\n  1\n -1\n\njulia> T = Tableau(A, b, c, false)\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ RHS │\n│ Obj Func │ 1 │  -2 │  -4 │  -2 │  -1 │   1 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   2 │   1 │   0 │   9 │  -1 │   9 │\n│   Cons 2 │ 0 │   1 │   1 │  -1 │   5 │   1 │   7 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"The fourth argument is false; this means that the constraints are already equalities and slack variables should not be appended. ","category":"page"},{"location":"create/#Automatic-Removal-of-Redundant-Constraints","page":"Creating Tableaux","title":"Automatic Removal of Redundant Constraints","text":"","category":"section"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"This situation applies to standard linear programs when the rank of the matrix [A b] is less than the number of rows. This implies that some of the equations A*x == b are redundant.  The Tableaux function automatically removes redundant rows. ","category":"page"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"julia> A = [1 2 3; 4 5 6; 5 7 9]\n3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 5  7  9\n\njulia> b = [1, 2, 3]\n\njulia> c = [1, 1, 1]\n3-element Vector{Int64}:\n 1\n 1\n 1\n\njulia> using LinearAlgebra\n\njulia> rank([A b])\n2\n\njulia> T = Tableau(A, b, c, false)\n┌──────────┬───┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ RHS │\n│ Obj Func │ 1 │  -1 │  -1 │  -1 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   1 │   2 │   3 │   1 │\n│   Cons 2 │ 0 │   4 │   5 │   6 │   2 │\n└──────────┴───┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"create/","page":"Creating Tableaux","title":"Creating Tableaux","text":"Notice that the third constraint has been (silently) removed.","category":"page"},{"location":"dual/#Duality","page":"Dual LP","title":"Duality","text":"","category":"section"},{"location":"dual/#The-dual-function","page":"Dual LP","title":"The dual function","text":"","category":"section"},{"location":"dual/","page":"Dual LP","title":"Dual LP","text":"If a tableau T is created from a canonical minimization problem, then dual(T)  returns a new tableau corresponding to dual linear program. However, dual(T) is  also a minimization problem. The minimum value of dual(T) is negative that of T. ","category":"page"},{"location":"dual/","page":"Dual LP","title":"Dual LP","text":"That is, if T represents the LP min c^T x s.t. Ax ge b, xge0, then dual(T) respresents the LP min b^T y s.t. -A^T y le -c, yge0. ","category":"page"},{"location":"dual/#Example","page":"Dual LP","title":"Example","text":"","category":"section"},{"location":"dual/","page":"Dual LP","title":"Dual LP","text":"julia> A = [11 2 11; 8 6 9; 8 8 5; 6 5 8; 4 1 2; 2 -1 4];\n\njulia> b = [0, 1, 10, 3, 2, 5];\n\njulia> c = [3, 4, 7];\n\njulia> T = Tableau(A,b,c):\n\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ x_7 │ x_8 │ x_9 │ RHS │\n│ Obj Func │ 1 │  -3 │  -4 │  -7 │   0 │   0 │   0 │   0 │   0 │   0 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │  11 │   2 │  11 │  -1 │   0 │   0 │   0 │   0 │   0 │   0 │\n│   Cons 2 │ 0 │   8 │   6 │   9 │   0 │  -1 │   0 │   0 │   0 │   0 │   1 │\n│   Cons 3 │ 0 │   8 │   8 │   5 │   0 │   0 │  -1 │   0 │   0 │   0 │  10 │\n│   Cons 4 │ 0 │   6 │   5 │   8 │   0 │   0 │   0 │  -1 │   0 │   0 │   3 │\n│   Cons 5 │ 0 │   4 │   1 │   2 │   0 │   0 │   0 │   0 │  -1 │   0 │   2 │\n│   Cons 6 │ 0 │   2 │  -1 │   4 │   0 │   0 │   0 │   0 │   0 │  -1 │   5 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"dual/","page":"Dual LP","title":"Dual LP","text":"The result of simplex_solve! on this tableau is 152. ","category":"page"},{"location":"dual/","page":"Dual LP","title":"Dual LP","text":"The tableau for the dual problem is:","category":"page"},{"location":"dual/","page":"Dual LP","title":"Dual LP","text":"julia> dT = dual(T)\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ x_7 │ x_8 │ x_9 │ RHS │\n│ Obj Func │ 1 │   0 │   1 │  10 │   3 │   2 │   5 │   0 │   0 │   0 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │ -11 │  -8 │  -8 │  -6 │  -4 │  -2 │  -1 │   0 │   0 │  -3 │\n│   Cons 2 │ 0 │  -2 │  -6 │  -8 │  -5 │  -1 │   1 │   0 │  -1 │   0 │  -4 │\n│   Cons 3 │ 0 │ -11 │  -9 │  -5 │  -8 │  -2 │  -4 │   0 │   0 │  -1 │  -7 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"dual/","page":"Dual LP","title":"Dual LP","text":"The result of simplex_solve!(dT) is -152. ","category":"page"},{"location":"other/#Other-Features","page":"Other Functions","title":"Other Features","text":"","category":"section"},{"location":"other/#Status-Functions","page":"Other Functions","title":"Status Functions","text":"","category":"section"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"The status function returns a symbol indicating the state of the tableau, T. The result  of status(T) is one of the following:","category":"page"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":":no_basis – no basis has been established for this tableau.\n:feasible – the tableau is in a feasible state, but not optimal (rhs is nonnegative).\n:infeasible – the tableau is in an infeasible state (rhs contains negative values). \n:optimal – the tableau has reached a global minimization point, This supercedes :feasible. \n:unbounded – the tableau has reached a feasible state, but there are no pivots; the objective function value can be arbitrarily negative. This supercedes :feasible.","category":"page"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"These functions are superfluous but may be convenient: ","category":"page"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"in_feasible_state(T) returns true if the current basic vector is in the feasible region (including if at optimality).\nin_optimal_state(T) returns true if the tableau has reached an optimal (minimal) state.","category":"page"},{"location":"other/#Miscellaneous-Functions","page":"Other Functions","title":"Miscellaneous Functions","text":"","category":"section"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"basic_vector(T) returns the vector in which the nonbasic variables have been set to zero. \ndual_basic_vector(T) returns the dual basic vector. \nheader(T) returns the top row of T (negative reduced costs). Does not include the 1 in column 0 nor the value in the last column. \nget_Abc(T) returns the original matrix A and the vectors b and c for the standard presentation of the linear program.\nget_basis(T) returns the column numbers of the current basis.\nis_infeasible(T) returns true if the linear program's feasible region is empty. \nis_unbounded(T) returns true if the linear program is unbounded (below).\nrhs(T) returns the righthand column of T (from row 1 onward – does not include the value in row 0).\nvalue(T) returns the objective function value of the current basic vector. \nvalue(T,x) returns the objective function value for the vector x. May also be invoked as T(x). ","category":"page"},{"location":"other/#Return-to-Start","page":"Other Functions","title":"Return to Start","text":"","category":"section"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"The function restore! returns the tableau to its state when it was constructed. ","category":"page"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"julia> T\n┌──────────┬───┬─────┬─────┬────────┬─────┬─────────┬──────────┐\n│          │ z │ x_1 │ x_2 │    x_3 │ x_4 │     x_5 │      RHS │\n│ Obj Func │ 1 │   0 │   0 │ -25/47 │   0 │ -110/47 │ 13500/47 │\n├──────────┼───┼─────┼─────┼────────┼─────┼─────────┼──────────┤\n│   Cons 1 │ 0 │   1 │   0 │   1/47 │   0 │   -5/47 │   400/47 │\n│   Cons 2 │ 0 │   0 │   0 │ -25/47 │   1 │  -16/47 │  -600/47 │\n│   Cons 3 │ 0 │   0 │   1 │  -5/47 │   0 │    3/94 │   350/47 │\n└──────────┴───┴─────┴─────┴────────┴─────┴─────────┴──────────┘\n\n\njulia> restore!(T)\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ RHS │\n│ Obj Func │ 1 │ -25 │ -10 │   0 │   0 │   0 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   3 │  10 │  -1 │   0 │   0 │ 100 │\n│   Cons 2 │ 0 │   5 │   6 │   0 │  -1 │   0 │ 100 │\n│   Cons 3 │ 0 │  10 │   2 │   0 │   0 │  -1 │ 100 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"other/#LaTeX-Output","page":"Other Functions","title":"LaTeX Output","text":"","category":"section"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"Using LatexPrint users can get the  code for pasting into a LaTeX document.","category":"page"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"julia> using LatexPrint\n\njulia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬──────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │  x_5 │ RHS │\n│ Obj Func │ 1 │   0 │  -3 │  -2 │   8 │    0 │   9 │\n├──────────┼───┼─────┼─────┼─────┼─────┼──────┼─────┤\n│   Cons 1 │ 0 │   1 │ 1/2 │   0 │ 9/2 │ -1/2 │ 9/2 │\n│   Cons 2 │ 0 │   0 │ 1/2 │  -1 │ 1/2 │  3/2 │ 5/2 │\n└──────────┴───┴─────┴─────┴─────┴─────┴──────┴─────┘\n\n\njulia> lap(T)\n\\begin{tabular}{|c|ccccc|c|}\\hline \n{\\Large\\strut}$z$ &$x_{1}$ & $x_{2}$ & $x_{3}$ & $x_{4}$ & $x_{5}$ & RHS \\\\\n{\\Large\\strut}$1$ & $0$ & $-3$ & $-2$ & $8$ & $0$ & $9$\\\\\n\\hline \n{\\Large\\strut}$0$ & $1$ & $\\frac{1}{2}$ & $0$ & $\\frac{9}{2}$ & $\\frac{-1}{2}$ & $\\frac{9}{2}$\\\\\n{\\Large\\strut}$0$ & $0$ & $\\frac{1}{2}$ & $-1$ & $\\frac{1}{2}$ & $\\frac{3}{2}$ & $\\frac{5}{2}$\\\\\n\\hline \n\\end{tabular}","category":"page"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"Here is the LaTeX output:","category":"page"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"(Image: )","category":"page"},{"location":"other/#Other-Public-Functions","page":"Other Functions","title":"Other Public Functions","text":"","category":"section"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"Presently, these functions are exported in SimplexTableaux but might be hidden in future releases.  They are not likely to be useful to the users of this module.  See the doc strings for more information:","category":"page"},{"location":"other/","page":"Other Functions","title":"Other Functions","text":"big_M_tableau\ncheck_basis\nfind_pivot_column\ninfer_basis!","category":"page"},{"location":"#SimplexTableaux","page":"Overview","title":"SimplexTableaux","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"This module can be used to solve linear programming problems using  the Simplex Method by pivoting tableaux. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"This is an illusration project for solving feasible optimization problems of the form  min c^T x subject to Ax  b and x ge 0 (canonical form) and of the form min c^T x subject to Ax = b and x ge 0 (standard form).","category":"page"},{"location":"#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The steps in solving linear programs with this module are as follows:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Create a Tableau from the matrix A and the vectors b and c.\nManipulate the Tableau using pivoting functions.\nAlternatively, use one of the solving methods:\nsimplex_solve!\nbig_M_solve!\nlp_solve","category":"page"},{"location":"#Caveats","page":"Overview","title":"Caveats","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"This is a demonstration project that is useful for illustrating the Simplex Method and for solving small linear programs. All arithmetic is exact (using arbitrary precision rational numbers).\nThis is somewhat early days for this module. The 0.2.x versions should be consider to be sort-of beta releases.","category":"page"},{"location":"pivot/#Pivoting-Tableaux","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"","category":"section"},{"location":"pivot/#Indexing","page":"Pivoting Tableaux","title":"Indexing","text":"","category":"section"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"The i,j-entry of a tableau is the entry in constraint row i and in the column of x_j.  The objective function row in the header is considered row 0 and the entries below z form column 0. Pivoting is only permitted for positive i and j.","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"The i,j-entry of a tableau T can be accessed using T[i,j]. This is a read-only operation; values in the tableau cannot be changed.","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ RHS │\n│ Obj Func │ 1 │  -2 │  -4 │  -2 │  -1 │   1 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   2 │   1 │   0 │   9 │  -1 │   9 │\n│   Cons 2 │ 0 │   1 │   1 │  -1 │   5 │   1 │   7 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> T[0,3]   # header row entry under x_3\n-2\n\njulia> T[2,5]   # entry in constraint 2 under x_5\n1\n\njulia> T[2,6]   # entry in constraint 2 under RHS\n7","category":"page"},{"location":"pivot/#Row/Column-Pivoting","page":"Pivoting Tableaux","title":"Row/Column Pivoting","text":"","category":"section"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"The function pivot! pivots on an element of a tableau. The (i,j)-entry in a tableau corresponts to the entry the row labeled Cons i and in the column labeled x_j. ","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"The syntax is pivot!(T, i, j) which will pivot the tableau on the entry corresponding to constraint i and variable x_j; that is, it performs a pivot on the i,j-element of the tableau.","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"For example:","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ RHS │\n│ Obj Func │ 1 │   1 │   3 │  -5 │   4 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │  -1 │   5 │  -4 │  -3 │  -3 │\n│   Cons 2 │ 0 │   3 │  -2 │   0 │   2 │   6 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> pivot!(T,2,4)\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ RHS │\n│ Obj Func │ 1 │  -5 │   7 │  -5 │   0 │ -12 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │ 7/2 │   2 │  -4 │   0 │   6 │\n│   Cons 2 │ 0 │ 3/2 │  -1 │   0 │   1 │   3 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"The pivot was performed on the 2 in the bottom row of T.","category":"page"},{"location":"pivot/#Finding-Pivots","page":"Pivoting Tableaux","title":"Finding Pivots","text":"","category":"section"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"The function find_pivot returns a pair (i,j) as a recommended basis pivot for a tableau. ","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"julia> T\n┌──────────┬───┬─────┬────────┬─────┬──────┬──────┐\n│          │ z │ x_1 │    x_2 │ x_3 │  x_4 │  RHS │\n│ Obj Func │ 1 │   0 │   -7/4 │   0 │ 25/4 │ -3/4 │\n├──────────┼───┼─────┼────────┼─────┼──────┼──────┤\n│   Cons 1 │ 0 │   1 │   -2/3 │   0 │  2/3 │    2 │\n│   Cons 2 │ 0 │   0 │ -13/12 │   1 │ 7/12 │  1/4 │\n└──────────┴───┴─────┴────────┴─────┴──────┴──────┘\n\n\njulia> find_pivot(T)\n(2, 4)\n\njulia> pivot!(T,2,4)\n┌──────────┬───┬─────┬───────┬───────┬─────┬───────┐\n│          │ z │ x_1 │   x_2 │   x_3 │ x_4 │   RHS │\n│ Obj Func │ 1 │   0 │  69/7 │ -75/7 │   0 │ -24/7 │\n├──────────┼───┼─────┼───────┼───────┼─────┼───────┤\n│   Cons 1 │ 0 │   1 │   4/7 │  -8/7 │   0 │  12/7 │\n│   Cons 2 │ 0 │   0 │ -13/7 │  12/7 │   1 │   3/7 │\n└──────────┴───┴─────┴───────┴───────┴─────┴───────┘","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"Note that find_pivot returns (0,0) if there are no feasible pivots. ","category":"page"},{"location":"pivot/#Finding-a-pivot-for-a-specific-column","page":"Pivoting Tableaux","title":"Finding a pivot for a specific column","text":"","category":"section"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"The function find_pivot can be invoked with a second argument specifying a column in which to find a pivot.  That is find_pivot(T, j) returns a pair (i,j) so that pivot!(T,i,j) is feasible. ","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"julia> T\n┌──────────┬───┬─────┬─────┬───────┬───────┬────────┬─────────┬─────┬────────┐\n│          │ z │ x_1 │ x_2 │   x_3 │   x_4 │    x_5 │     x_6 │ x_7 │    RHS │\n│ Obj Func │ 1 │   0 │   0 │ 85/42 │  17/7 │ 149/21 │ -145/42 │   0 │ 202/21 │\n├──────────┼───┼─────┼─────┼───────┼───────┼────────┼─────────┼─────┼────────┤\n│   Cons 1 │ 0 │   1 │   0 │  -1/3 │   1/2 │   -1/3 │     1/3 │   0 │    5/6 │\n│   Cons 2 │ 0 │   0 │   1 │ 32/21 │ -1/14 │  86/21 │    1/21 │   0 │   5/42 │\n│   Cons 3 │ 0 │   0 │   0 │ 13/42 │  1/14 │   5/21 │    5/42 │   1 │  23/42 │\n└──────────┴───┴─────┴─────┴───────┴───────┴────────┴─────────┴─────┴────────┘\n\n\njulia> find_pivot(T,3)\n(2, 3)\n\njulia> find_pivot(T,4)\n(1, 4)\n\njulia> find_pivot(T,5)\n(2, 5)\n\njulia> find_pivot(T,6)   # Column 6 is headed by a negative number\n[ Info: Invalid column for pivot, 6.\n(0, 0)","category":"page"},{"location":"pivot/#Other-row-operations","page":"Pivoting Tableaux","title":"Other row operations","text":"","category":"section"},{"location":"pivot/#Scaling","page":"Pivoting Tableaux","title":"Scaling","text":"","category":"section"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"The function scale_row!(T, i, m) modifies the tableau T by multiplying constraint row i by the nonzero scalar m. ","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ RHS │\n│ Obj Func │ 1 │  -3 │  -4 │   1 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   0 │   1 │   2 │   4 │\n│   Cons 2 │ 0 │   3 │   0 │  -1 │   5 │\n└──────────┴───┴─────┴─────┴─────┴─────┘\n\njulia> scale_row!(T, 2, 1//3)\n┌──────────┬───┬─────┬─────┬──────┬─────┐\n│          │ z │ x_1 │ x_2 │  x_3 │ RHS │\n│ Obj Func │ 1 │  -3 │  -4 │    1 │   0 │\n├──────────┼───┼─────┼─────┼──────┼─────┤\n│   Cons 1 │ 0 │   0 │   1 │    2 │   4 │\n│   Cons 2 │ 0 │   1 │   0 │ -1/3 │ 5/3 │\n└──────────┴───┴─────┴─────┴──────┴─────┘","category":"page"},{"location":"pivot/#Swapping","page":"Pivoting Tableaux","title":"Swapping","text":"","category":"section"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"swap_rows!(T, i, j) swaps rows (contraints) i and j:","category":"page"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ x_7 │ RHS │\n│ Obj Func │ 1 │  -9 │  -4 │  -2 │  -2 │  -7 │  -7 │  -3 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   2 │   2 │   3 │   1 │   8 │   1 │   2 │   3 │\n│   Cons 2 │ 0 │   3 │   1 │   3 │   2 │   5 │   2 │   8 │   7 │\n│   Cons 3 │ 0 │   8 │   2 │   1 │   4 │   6 │   3 │   2 │   8 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> swap_rows!(T,2,3)\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ x_7 │ RHS │\n│ Obj Func │ 1 │  -9 │  -4 │  -2 │  -2 │  -7 │  -7 │  -3 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   2 │   2 │   3 │   1 │   8 │   1 │   2 │   3 │\n│   Cons 2 │ 0 │   8 │   2 │   1 │   4 │   6 │   3 │   2 │   8 │\n│   Cons 3 │ 0 │   3 │   1 │   3 │   2 │   5 │   2 │   8 │   7 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"pivot/#Starting-Over","page":"Pivoting Tableaux","title":"Starting Over","text":"","category":"section"},{"location":"pivot/","page":"Pivoting Tableaux","title":"Pivoting Tableaux","text":"Use restore!(T) to return T to its original values before any pivoting was performed or basis was specified. ","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This is a step-by-step guide for solving linear programs using the SimplexTableau module.","category":"page"},{"location":"tutorial/#Set-up-the-problem","page":"Tutorial","title":"Set up the problem","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This module enables the user to solve linear program problems in one of the following two forms:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Standard: min c^T  x subject to A x = b x  0. Use: Tableau(A,b,c,false). \nCanonical: min c^T  x subject to A x  b x  0. Use: Tableau(A,b,c).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here, A is an m times n-matrix, b is an m-vector, and c is an n-vector. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Only minimization problems are supported. ","category":"page"},{"location":"tutorial/#Example:-Standard-form-linear-program","page":"Tutorial","title":"Example: Standard form linear program","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let  A=left beginarrayrrrrrr 1  8  -2  8  6  -1 \n2  6  2  9  2  1 \n6  3  5  9  7  1 \nendarray right,  b= left beginarrayr -2 \n4 \n9 \nendarray right, and c = left beginarrayr 0 \n3 \n3 \n-1 \n2 \n-4 \nendarray right. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here is how to set up the standard LP min c^T x s.t. Ax=bxge0:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> A = [1 8 -2 8 6 -1; 2 6 2 9 2 1; 6 3 5 9 7 1];\n\njulia> b = [-2, 4, 9];\n\njulia> c = [0, 3, 3, -1, 2, -4];\n\njulia> T = Tableau(A, b, c, false)\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │   0 │  -3 │  -3 │   1 │  -2 │   4 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   1 │   8 │  -2 │   8 │   6 │  -1 │  -2 │\n│   Cons 2 │ 0 │   2 │   6 │   2 │   9 │   2 │   1 │   4 │\n│   Cons 3 │ 0 │   6 │   3 │   5 │   9 │   7 │   1 │   9 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Note the false in the function call; it indicates that this is not canoncial (that is, it is standard) so no slack variables are added. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Written as a (partitioned) matrix, this tableau looks like this:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"left\nbeginarrayrrrrrrrr\n1  0  -3  -3  1  -2  4  0  hline\n0  1  8  -2  8  6  -1  -2 \n0  2  6  2  9  2  1  4 \n0  6  3  5  9  7  1  9 \nendarray\nright\n\n\n\nThe top (header) two represents the objective function we wish to minimize\nz = 0x_1 + 3x_2 + 3x_3 - x_4 + 2x_5 - 4x_6","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":". It is rearranged to appear in the form  z - 0x_1 - 3x_2 - 3x_3 + x_4 - 2x_5 + 4x_6 = 0. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The next three rows are the constraints from A x = b. For example, the first constraint is x_1 + 8x_2 - 2x_3 + 8x_4 + 6x_5 - x_6 = -2.","category":"page"},{"location":"tutorial/#Example:-Canonical-form-linear-program","page":"Tutorial","title":"Example: Canonical form linear program","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let A=left beginarrayrrrr 7  5  2  9 \n5  9  5  5 \nendarray right,  b=left beginarrayr 2 \n5 \nendarray right  and c=left beginarrayr 7 \n6 \n3 \n4 \nendarray right. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here is how to set up the canonical LP min c^T x s.t. Axge b xge0:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> A = [7 5 2 9; 5 9 5 5];\n\njulia> b = [2, 5];\n\njulia> c = [7, 6, 3, 4];\n\njulia> T = Tableau(A, b, c)\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │  -7 │  -6 │  -3 │  -4 │   0 │   0 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   7 │   5 │   2 │   9 │  -1 │   0 │   2 │\n│   Cons 2 │ 0 │   5 │   9 │   5 │   5 │   0 │  -1 │   5 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Note that x_5 and x_6 are added as slack variables. Therefore the first constraint is 7x_1 + 5x_2 +2 x_3 +9x_4 - x_5=2 is equivalent to 7x_1 + 5x_2 +2 x_3 +9x_4 ge 2. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The objective function is z = 7x_1 + 6x_2 + 3x_3 + 4x_4 that is encoded in the tableau  as z-7x_1 -6x_2 -3x_3 -4x_4=0. ","category":"page"},{"location":"tutorial/#Pivoting","page":"Tutorial","title":"Pivoting","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Pivoting is a fundamental operation in linear algebra that is used extensively in the Simplex Method. A pivot on a element a_ij of a matrix begins by multiplying row i by 1a_ij. This leaves a 1 in position ij. Then multiples of row i are added to the other rows so that all the other entries in column j are now 0. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example, suppose we wish to pivot on the 2 in this matrix:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"left\nbeginarrayrrrrrrrr\n1  -7  -6  -3  -4  0  0  0  hline\n0  7  5  fbox2  9  -1  0  2 \n0  5  9  5  5  0  -1  5 \nendarray\nright","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The main body of the matrix lies below the header row and between the vertical dividers. This is considered to be the 13-entry of the matrix: this corresponds to the constraint 1 in the column of x_3. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"First we multiply row 1 through by 12:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"left\nbeginarrayrrrrrrrr\n1  -7  -6  -3  -4  0  0  0  hline\n0  72  52  1  92  -12  0  1 \n0  5  9  5  5  0  -1  5 \nendarray\nright","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Then we add 3 times the first row to the header (row 0) and -5 times the first row to the second row:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"left\nbeginarrayrrrrrrrr\n1  72  32  0  192  -32  0  3  hline\n0  72  52  1  92  -12  0  1 \n0  -252  -72  0  -352  52  -1  0 \nendarray\nright","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In the SimplexTableau module, this operation is accomplished with the pivot! function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │  -7 │  -6 │  -3 │  -4 │   0 │   0 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   7 │   5 │   2 │   9 │  -1 │   0 │   2 │\n│   Cons 2 │ 0 │   5 │   9 │   5 │   5 │   0 │  -1 │   5 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> pivot!(T,1,3)\n[ Info: Unable to infer basis\n┌──────────┬───┬───────┬──────┬─────┬───────┬──────┬─────┬─────┐\n│          │ z │   x_1 │  x_2 │ x_3 │   x_4 │  x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │   7/2 │  3/2 │   0 │  19/2 │ -3/2 │   0 │   3 │\n├──────────┼───┼───────┼──────┼─────┼───────┼──────┼─────┼─────┤\n│   Cons 1 │ 0 │   7/2 │  5/2 │   1 │   9/2 │ -1/2 │   0 │   1 │\n│   Cons 2 │ 0 │ -25/2 │ -7/2 │   0 │ -35/2 │  5/2 │  -1 │   0 │\n└──────────┴───┴───────┴──────┴─────┴───────┴──────┴─────┴─────┘","category":"page"},{"location":"tutorial/#Bases","page":"Tutorial","title":"Bases","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The Simplex Method begins by finding a set of m columns (where m is the number of  constraints) that are linearly independent. We pivot on elements of those columns to  transform them into standard basis vectors. That is, in each of those columns there is a single 1  all other elements of that column are 0 (including in the header).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In the example we just considered, we see that pivoting on the -1 in the (26) position  will result in columns 3 and 6 forming a basis, and so those columns are called basic. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> T\n┌──────────┬───┬───────┬──────┬─────┬───────┬──────┬─────┬─────┐\n│          │ z │   x_1 │  x_2 │ x_3 │   x_4 │  x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │   7/2 │  3/2 │   0 │  19/2 │ -3/2 │   0 │   3 │\n├──────────┼───┼───────┼──────┼─────┼───────┼──────┼─────┼─────┤\n│   Cons 1 │ 0 │   7/2 │  5/2 │   1 │   9/2 │ -1/2 │   0 │   1 │\n│   Cons 2 │ 0 │ -25/2 │ -7/2 │   0 │ -35/2 │  5/2 │  -1 │   0 │\n└──────────┴───┴───────┴──────┴─────┴───────┴──────┴─────┴─────┘\n\njulia> pivot!(T,2,6)\n┌──────────┬───┬──────┬─────┬─────┬──────┬──────┬─────┬─────┐\n│          │ z │  x_1 │ x_2 │ x_3 │  x_4 │  x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │  7/2 │ 3/2 │   0 │ 19/2 │ -3/2 │   0 │   3 │\n├──────────┼───┼──────┼─────┼─────┼──────┼──────┼─────┼─────┤\n│   Cons 1 │ 0 │  7/2 │ 5/2 │   1 │  9/2 │ -1/2 │   0 │   1 │\n│   Cons 2 │ 0 │ 25/2 │ 7/2 │   0 │ 35/2 │ -5/2 │   1 │   0 │\n└──────────┴───┴──────┴─────┴─────┴──────┴──────┴─────┴─────┘\n\njulia> get_basis(T)\n2-element Vector{Int64}:\n 3\n 6","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The get_basis function returns the current basis. If the tableau does not have a basis, a vector of all zeros is returned. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"On the computer display, the labels of the basic columns are green. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"tutorial/#Setting-a-basis","page":"Tutorial","title":"Setting a basis","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The function set_basis! is used to select columns to be a basis. This is invoked as  set_basis(T, B) where B is a list of m indices specifying the columns to form a basis. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> set_basis!(T,[2,4])\n┌──────────┬───┬────────┬─────┬──────┬─────┬───────┬────────┬──────┐\n│          │ z │    x_1 │ x_2 │  x_3 │ x_4 │   x_5 │    x_6 │  RHS │\n│ Obj Func │ 1 │ -45/14 │   0 │  1/4 │   0 │ -3/28 │ -17/28 │ 13/4 │\n├──────────┼───┼────────┼─────┼──────┼─────┼───────┼────────┼──────┤\n│   Cons 1 │ 0 │   5/28 │   1 │  5/8 │   0 │  5/56 │  -9/56 │  5/8 │\n│   Cons 2 │ 0 │  19/28 │   0 │ -1/8 │   1 │ -9/56 │   5/56 │ -1/8 │\n└──────────┴───┴────────┴─────┴──────┴─────┴───────┴────────┴──────┘","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"However, this basis is not suitable for the Simplex Algorithm because the RHS column contains negative numbers. In other words, 24  is an infeasible basis. On the other hand 36 yields a  feasible tableau.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> set_basis!(T,[3,6])\n┌──────────┬───┬──────┬─────┬─────┬──────┬──────┬─────┬─────┐\n│          │ z │  x_1 │ x_2 │ x_3 │  x_4 │  x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │  7/2 │ 3/2 │   0 │ 19/2 │ -3/2 │   0 │   3 │\n├──────────┼───┼──────┼─────┼─────┼──────┼──────┼─────┼─────┤\n│   Cons 1 │ 0 │  7/2 │ 5/2 │   1 │  9/2 │ -1/2 │   0 │   1 │\n│   Cons 2 │ 0 │ 25/2 │ 7/2 │   0 │ 35/2 │ -5/2 │   1 │   0 │\n└──────────┴───┴──────┴─────┴─────┴──────┴──────┴─────┴─────┘","category":"page"},{"location":"tutorial/#Automatic-basis-selection","page":"Tutorial","title":"Automatic basis selection","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"While any m linearly independent columns may be selected to form a basis, finding a set of columns that yield a feasible tableau can be difficult. Below we describe a method for finding a basis,  but we also provide tools to make this easy.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The function find_a_basis will automatically find a feasible basis. Combined with set_basis!  the resut is a tableau that has been pivoted to a feasible configuation. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │  -7 │  -6 │  -3 │  -4 │   0 │   0 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   7 │   5 │   2 │   9 │  -1 │   0 │   2 │\n│   Cons 2 │ 0 │   5 │   9 │   5 │   5 │   0 │  -1 │   5 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> find_a_basis(T)\n2-element Vector{Int64}:\n 2\n 5\n\njulia> set_basis!(T,[2,5])\n┌──────────┬───┬───────┬─────┬─────┬───────┬─────┬──────┬──────┐\n│          │ z │   x_1 │ x_2 │ x_3 │   x_4 │ x_5 │  x_6 │  RHS │\n│ Obj Func │ 1 │ -11/3 │   0 │ 1/3 │  -2/3 │   0 │ -2/3 │ 10/3 │\n├──────────┼───┼───────┼─────┼─────┼───────┼─────┼──────┼──────┤\n│   Cons 1 │ 0 │   5/9 │   1 │ 5/9 │   5/9 │   0 │ -1/9 │  5/9 │\n│   Cons 2 │ 0 │ -38/9 │   0 │ 7/9 │ -56/9 │   1 │ -5/9 │  7/9 │\n└──────────┴───┴───────┴─────┴─────┴───────┴─────┴──────┴──────┘","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Alternatively, invoking set_basis!(T) without specifying a basis will  use find_a_basis to choose the basis for you. ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"If the tableau does not have a feasible basis, find_a_basis returns a vector of all zeros.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ RHS │\n│ Obj Func │ 1 │  -3 │  -1 │  -5 │  -2 │  -5 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   3 │   2 │   2 │   2 │   3 │   4 │\n│   Cons 2 │ 0 │   4 │   4 │   3 │   5 │   2 │   2 │\n│   Cons 3 │ 0 │   1 │   2 │   4 │   2 │   1 │   1 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> find_a_basis(T)\n[ Info: No basis found.\n3-element Vector{Int64}:\n 0\n 0\n 0","category":"page"},{"location":"tutorial/#Listing-all-feasible-bases","page":"Tutorial","title":"Listing all feasible bases","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The function find_all_bases returns a list of all feasible bases for a tableau:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> T\n┌──────────┬───┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n│          │ z │ x_1 │ x_2 │ x_3 │ x_4 │ x_5 │ x_6 │ RHS │\n│ Obj Func │ 1 │   0 │  -3 │  -3 │   1 │  -2 │   4 │   0 │\n├──────────┼───┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n│   Cons 1 │ 0 │   1 │   8 │  -2 │   8 │   6 │  -1 │  -2 │\n│   Cons 2 │ 0 │   2 │   6 │   2 │   9 │   2 │   1 │   4 │\n│   Cons 3 │ 0 │   6 │   3 │   5 │   9 │   7 │   1 │   9 │\n└──────────┴───┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n\n\njulia> find_all_bases(T)\n6-element Vector{Vector{Int64}}:\n [1, 2, 3]\n [1, 3, 4]\n [1, 3, 6]\n [2, 3, 5]\n [3, 4, 5]\n [3, 5, 6]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The find_all_bases function is highly inefficient and only suitable for small linear programs. ","category":"page"},{"location":"tutorial/#Simplex-Method","page":"Tutorial","title":"Simplex Method","text":"","category":"section"},{"location":"tutorial/#Manually","page":"Tutorial","title":"Manually","text":"","category":"section"},{"location":"tutorial/#Fully-automatic","page":"Tutorial","title":"Fully automatic","text":"","category":"section"},{"location":"tutorial/#Two-phase-method-(finding-a-first-basis)","page":"Tutorial","title":"Two phase method (finding a first basis)","text":"","category":"section"},{"location":"tutorial/#Numerical-solution","page":"Tutorial","title":"Numerical solution","text":"","category":"section"}]
}
